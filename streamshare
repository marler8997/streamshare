#!/usr/bin/env python3
import sys
import os

if sys.version_info[0] < 3:
    sys.exit("Error: require python version >= 3 but got {}".format(sys.version))

import math
import time
import datetime
import argparse
#import subprocess
import threading
import select
import json
import urllib.parse
import http.server
import html
import socket

PING_TIMEOUT_SEC = 10

def now_millis():
    return time.time_ns() / 1000000

class Shared:
    def __init__(self):
        self.event_connections = []
        self.current_event_json = None
        self.current_event_time = None
    def set_event(self, event_json, event_time):
        self.current_event_json = event_json
        self.current_event_time = event_time
    def have_event(self):
        return self.current_event_json != None
    def make_event_msg(self):
        if self.have_event():
            millis_since = now_millis() - self.current_event_time
            return '{{"millis_since":{},"data":{}}}'.format(math.floor(millis_since), self.current_event_json)
        else:
            return '{"millis_since":0,"data":{"type":"stop"}}'

shared = Shared()

def broadcast_event(event):
    shared.set_event(json.dumps(event), now_millis())
    print("broadcasting: {}".format(shared.current_event_json))
    for conn in shared.event_connections:
        # make a new message each time for an updated timestamp
        msg = shared.make_event_msg()
        conn.send_event_msg(msg)

class Handler (http.server.BaseHTTPRequestHandler):
    CONNECTION_TYPE_NORMAL = 0
    CONNECTION_TYPE_EVENTS = 1
    CONNECTION_TYPE_ADMIN_EVENTS = 2
    protocol_version = 'HTTP/1.1'
    def __init__(self, *args, **kwargs):
        self.connection_type = Handler.CONNECTION_TYPE_NORMAL
        super().__init__(*args, **kwargs)

    def handle(self):
        try:
            self.close_connection = True
            self.handle_one_request()
            while not self.close_connection:
                if self.connection_type == Handler.CONNECTION_TYPE_NORMAL:
                    self.handle_one_request()
                else:
                    # wait for file to be readable
                    #print("{}: waiting for data...".format(self.client_address))
                    readable,_,_ = select.select([self.rfile], [], [], PING_TIMEOUT_SEC)
                    if len(readable) > 0:
                        self.handle_one_request()
                    else:
                        ping_msg = '{"millis_since":0,"data":{"type":"ping"}}'
                        self.send_event_msg(ping_msg)
        finally:
            if self.connection_type == Handler.CONNECTION_TYPE_EVENTS:
                print("{}: events connection closed".format(self.client_address))
                shared.event_connections.remove(self)


    def _send_html(self, code, message, add_debug_info=False):
        debug_info = ""
        if add_debug_info:
            debug_info = "<pre>vars(self) = {}</pre>".format(html.escape(str(vars(self))))
        response = "<html><title>Error {}</title><body>{}{}</body></html>".format(code, message, debug_info).encode('utf8')
        self.send_response(code)
        self.send_header('Content-Type', 'text/html')
        self.send_header('Content-Length', len(response))
        self.end_headers()
        self.wfile.write(response)

    def send_event_headers(self):
        self.send_response(200)
        self.send_header('Content-Type', 'text/event-stream')
        self.send_header('Cache-Control', 'no-cache')
        self.send_header('Connection', 'keep-alive')
        self.end_headers()
    def send_event_msg(self, data):
        response = ("data: " + data + "\n\n").encode('utf8')
        try:
            self.wfile.write(response)
            self.wfile.flush() # is this necessary?
        except OSError as err:
            print("{}: write failed: {}".format(self.client_address, err))
            self.close_connection = True
            # todo: maybe try something like this to pop the call to read rfile
            #print("!!!!!!!!!!!!!!!!!!!! addr={}".format(self.client_address))
            #self.rfile.fileno().shutdown(socket.SHUT_RDWR)

    def do_GET(self):
        parsed_url = urllib.parse.urlparse(self.path)
        url_path = parsed_url.path.lstrip('/')
        if url_path == "events":
            shared.event_connections.append(self)
            self.connection_type = Handler.CONNECTION_TYPE_EVENTS
            print("{}: new events connection".format(self.client_address))
            self.send_event_headers()
            msg = shared.make_event_msg()
            print("{}: sending {}".format(self.client_address, msg))
            self.send_event_msg(msg)
            return
        #if url_path == "adminevents":
        #    !!!
        if url_path == "event":
            print("got event: {}".format(parsed_url))
            event = dict(urllib.parse.parse_qsl(parsed_url.query))
            print("  event={}".format(json.dumps(event)))
            broadcast_event(event)
            self.send_response(200)
            self.send_header('Content-Length', 0)
            self.end_headers()
            return

        if len(url_path) == 0:
            url_path = "client.html"
        if url_path == "admin":
            url_path = "admin.html"
        file_path = "webroot/" + url_path

        content_type = None
        try:
            # TODO: should I use mmap?
            with open(file_path, "rb") as file:
                content = file.read()
        except FileNotFoundError:
            self._send_html(404, "path '{}' is not found".format(url_path), False)
            return

        self.send_response(200)
        self.send_header('Content-Length', len(content))
        if content_type:
            self.send_header('Content-Type', content_type)
        elif url_path.endswith(".html"):
            self.send_header('Content-Type', 'text/html')
        elif url_path.endswith(".js"):
            self.send_header('Content-Type', 'text/javascript')
        elif url_path.endswith(".css"):
            self.send_header('Content-Type', 'text/css')
        self.end_headers()
        self.wfile.write(content)

def handle_request(server):
    print("thread {} waiting for client...".format(threading.get_ident()))
    server.handle_request()

class HttpThread(threading.Thread):
    def __init__(self, server):
        threading.Thread.__init__(self)
        self.server = server
    def run(self):
        handle_request(self.server)

class MultiThreadedHTTPServer(http.server.HTTPServer):
    def process_request(self, request, client_address):
        # start a new thread
        new_thread = HttpThread(self)
        new_thread.start()
        http.server.HTTPServer.process_request(self, request, client_address)

def main():
    parser = argparse.ArgumentParser(description='StreamShare web server')
    parser.add_argument('--port', type=int, default=80)
    args = parser.parse_args()
    server_address = ('0.0.0.0', args.port)
    print("listen address {}".format(server_address))
    server = MultiThreadedHTTPServer(server_address,  Handler)
    handle_request(server)

main()
